*&---------------------------------------------------------------------*
*& Include          ZNCPRH_P044_I001
*&---------------------------------------------------------------------*

FORM f_get_file .

  CALL FUNCTION 'F4_FILENAME'
    EXPORTING
      program_name  = syst-cprog
      dynpro_number = syst-dynnr
      field_name    = ' '
    IMPORTING
      file_name     = p_file.

ENDFORM.                    "” F_GET_FILE

FORM f_sub_get_data  USING    p_file TYPE localfile
                     CHANGING p_gt_tab TYPE tty_emp.

  DATA: ls_work_area TYPE tty_emp,
        lv_filename  TYPE string.

  CLEAR lv_filename.
  MOVE p_file TO lv_filename.

  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      filename                = lv_filename
      filetype                = 'DAT'
      has_field_separator     = 'X'
    TABLES
      data_tab                = p_gt_tab
    EXCEPTIONS
      file_open_error         = 1
      file_read_error         = 2
      no_batch                = 3
      gui_refuse_filetransfer = 4
      invalid_type            = 5
      no_authority            = 6
      unknown_error           = 7
      bad_data_format         = 8
      header_not_allowed      = 9
      separator_not_allowed   = 10
      header_too_long         = 11
      unknown_dp_error        = 12
      access_denied           = 13
      dp_out_of_memory        = 14
      disk_full               = 15
      dp_timeout              = 16
      OTHERS                  = 17.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.

FORM f_sub_upload_data  USING    p_gt_emp TYPE tty_emp
                        CHANGING p_gt_result TYPE tty_result.

  DATA: lv_lines     TYPE i,
        ls_result    TYPE zncprh_s034,
        ls_data      TYPE zncprh_s033,
        lv_msg(80)   TYPE c,
        lv_taskname  TYPE numc10 VALUE '0',
        lv_excp_flag TYPE flag.
  DATA: lt_tmp       TYPE TABLE OF zncprh_s033.
  FIELD-SYMBOLS: <lfs_emp> TYPE zncprh_s033.

  CLEAR:ls_data,
        ls_result,
        gv_snd_task,
        gv_rcv_task,
        lv_lines.

  DESCRIBE TABLE p_gt_emp LINES lv_lines.
  lt_tmp = p_gt_emp.

  LOOP AT p_gt_emp ASSIGNING <lfs_emp>.

    ADD 1 TO gv_ptask.
    MOVE <lfs_emp> TO ls_data.

    CLEAR: lv_excp_flag.

    DO.
      ADD 1 TO lv_taskname.

      CALL FUNCTION 'ZNCPRH_FG005_001'
        STARTING NEW TASK lv_taskname
        DESTINATION IN GROUP p_rfcgr
        PERFORMING process_callback_prog ON END OF TASK
        EXPORTING
          im_data               = ls_data
        EXCEPTIONS
          communication_failure = 1 MESSAGE lv_msg
          system_failure        = 2 MESSAGE lv_msg
          resource_failure      = 3 "“No work processes are
          OTHERS                = 4. "“Add exceptions generated by
*the called function module here.  Exceptions are returned to you and you can
* respond to them here.

      CASE sy-subrc.
        WHEN 0.
          ADD 1 TO gv_snd_task.
        WHEN 1 OR 2.
          CLEAR: ls_result.
          MOVE-CORRESPONDING <lfs_emp> TO ls_result.
          MOVE 'Not_Updated'   TO ls_result-statu.
          APPEND ls_result     TO p_gt_result.
          CLEAR ls_result.
        WHEN 3.
          lv_excp_flag = 'X'.
          WAIT UNTIL gv_rcv_task >= gv_snd_task UP TO '1' SECONDS.
        WHEN OTHERS.
          CLEAR ls_result.
      ENDCASE.

      IF lv_excp_flag IS INITIAL.
        EXIT.
      ENDIF.
    ENDDO.

  ENDLOOP.

  WAIT UNTIL gv_rcv_task >= gv_snd_task UP TO 10 SECONDS.
ENDFORM.

FORM process_callback_prog USING gv_task.

  DATA: ls_result TYPE zncprh_s034.

  gv_ptask = gv_ptask - 1.

  RECEIVE RESULTS FROM FUNCTION 'ZNCPRH_FG004_001'
      IMPORTING
         ex_result   = ls_result
      EXCEPTIONS
           no_update = 1
           OTHERS    = 2.

  gv_rcv_task = gv_rcv_task + 1.

  APPEND ls_result TO  gt_result.

  CLEAR ls_result.

ENDFORM.                    "” PROCESS_CALLBACK_PROG
